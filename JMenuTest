package maro1;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Scanner;

import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

public class JMenuTest extends JFrame implements ActionListener 
{
	JPopupMenu popup;
	JButton bSzukaj, bWybierzKolor;
	JMenuBar menuBar;
	JMenu menuPlik, menuNarzedzia, menuPomoc, menuOpcje, menuWidok;
	JMenuItem mOtworz, mZapisz, mWyjscie, mNarz1, mNarz2, mOpcja1, mOpcja2, mpKopiuj, mpWklej, mpDolacz, mOProgramie, mMetal, mWindows, mNimbus, mInny;
	JCheckBoxMenuItem chOpcja3;
	JTextArea taNotatnik;
	JTextField tSzukany;
	String wybranyTekst;
	JComboBox colorCombo;
	
	public JMenuTest()
	{
		setTitle("Prosty Program");
		setSize(800,800);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setLayout(null);
		
		menuBar = new JMenuBar();
		menuPlik = new JMenu("Plik");
		menuWidok = new JMenu("Widok");
		
		mOtworz = new JMenuItem("Otwórz", 'O');
		mOtworz.addActionListener(this);
		mZapisz = new JMenuItem("Zapisz");
		mZapisz.addActionListener(this);
		mWyjscie = new JMenuItem("Wyjście");
		
		menuPlik.add(mOtworz);
		menuPlik.add(mZapisz);
		menuPlik.addSeparator();
		menuPlik.add(mWyjscie);

		mMetal = new JMenuItem("Metal");
		mMetal.addActionListener(this);
		menuWidok.add(mMetal);
		mNimbus = new JMenuItem("Nimbus");
		mNimbus.addActionListener(this);
		menuWidok.add(mNimbus);
		mWindows = new JMenuItem("Windows");
		mWindows.addActionListener(this);
		menuWidok.add(mWindows);
		mInny = new JMenuItem("Inny");
		mInny.addActionListener(this);
		menuWidok.add(mInny);
		
		mWyjscie.addActionListener(this);
		mWyjscie.setAccelerator(KeyStroke.getKeyStroke("ctrl X"));
		
		menuNarzedzia = new JMenu("Narzędzia");
		mNarz1 = new JMenuItem("Narzędzie 1");
		mNarz1.setEnabled(false);
		mNarz2 = new JMenuItem("Metry/Stopy");
		mNarz2.addActionListener(this);
		
		menuNarzedzia.add(mNarz1);
		menuNarzedzia.add(mNarz2);
		
			menuOpcje = new JMenu("Opcje");
			mOpcja1 = new JMenuItem("Opcja 1");
			mOpcja2 = new JMenuItem("Opcja 2");
			chOpcja3 = new JCheckBoxMenuItem("Opcja 3");
			chOpcja3.addActionListener(this);
			
			menuOpcje.add(mOpcja1);
			menuOpcje.add(mOpcja2);
			menuOpcje.add(chOpcja3);
		menuNarzedzia.add(menuOpcje);	
		
		menuBar.add(Box.createVerticalGlue());
		
		menuPomoc = new JMenu("Pomoc");
		mOProgramie = new JMenuItem("O Programie");
		mOProgramie.addActionListener(this);
		menuPomoc.add(mOProgramie);
		
		setJMenuBar(menuBar);
		menuBar.add(menuPlik);
		menuBar.add(menuNarzedzia);
		menuBar.add(menuPomoc);
		menuBar.add(menuWidok);
		
		
		taNotatnik = new JTextArea();
		JScrollPane scrollPane = new JScrollPane(taNotatnik);
		scrollPane.setBounds(50,50,500,300);
		add(scrollPane);
		
		tSzukany = new JTextField();
		tSzukany.setBounds(50,500,200,20);
		add(tSzukany);
		
		bSzukaj = new JButton("Szukaj");
		bSzukaj.setBounds(400,500,150,20);
		add(bSzukaj);
		bSzukaj.addActionListener(this);
		
		bWybierzKolor = new JButton("Wybierz kolor");
		bWybierzKolor.setBounds(400,600,150,20);
		add(bWybierzKolor);
		bWybierzKolor.addActionListener(this);
		
		popup = new JPopupMenu();
		mpKopiuj = new JMenuItem("Kopiuj");
		mpKopiuj.addActionListener(this);
		
		mpWklej = new JMenuItem("Wklej");
		mpWklej.addActionListener(this);
		
		mpDolacz = new JMenuItem("Dołącz");
		mpDolacz.addActionListener(this);
		
		popup.add(mpKopiuj);
		popup.add(mpWklej);
		popup.add(mpDolacz);
		
		taNotatnik.setComponentPopupMenu(popup);
		
		colorCombo = new JComboBox();
		colorCombo.setBounds(50, 550, 100, 20);
		colorCombo.addItem("czarny");
		colorCombo.addItem("czerwony");
		colorCombo.addItem("zielony");
		colorCombo.addItem("niebieski");
		add(colorCombo);
		colorCombo.addActionListener(this);
	}

	@Override
	public void actionPerformed(ActionEvent e) 
	{
		Object z = e.getSource();
		if(z == mOtworz)
		{
			JFileChooser fc = new JFileChooser();
			if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
			{
				File plik = fc.getSelectedFile();
				//JOptionPane.showMessageDialog(null, "Wybrany plik to: " + plik.getName());
				try 
				{
					Scanner skaner = new Scanner(plik);
					while(skaner.hasNext())
						taNotatnik.append(skaner.nextLine()+ "\n");
					
				} catch (FileNotFoundException e1) 
				{
					e1.printStackTrace();
				}
			}
		}
		else if(z == mZapisz)
		{
			JFileChooser fc = new JFileChooser();
			if(fc.showSaveDialog(null) == JFileChooser.APPROVE_OPTION)
			{
				File plik = fc.getSelectedFile();
				//JOptionPane.showMessageDialog(null, "Wybrany plik to: " + plik);
				try 
				{
					PrintWriter pw = new PrintWriter(plik);
					Scanner skaner = new Scanner(taNotatnik.getText());
					while(skaner.hasNext())
					{
						pw.println(skaner.nextLine() + "\n");
					}
					pw.close();
				} 
				catch (FileNotFoundException e1) 
				{
					e1.printStackTrace();
				}
				
			}
		}
		else if(z == mWyjscie)
		{
			int odp = JOptionPane.showConfirmDialog(this, "Czy napewno chcesz opuścić program? ", "Pytanie", JOptionPane.YES_NO_OPTION);
			if(odp == JOptionPane.YES_OPTION)
			dispose();
			else if(odp == JOptionPane.NO_OPTION)
				JOptionPane.showMessageDialog(this, "A jednak zostajesz...");
		}
		if(z == chOpcja3)
		{
			if(chOpcja3.isSelected())
				mNarz1.setEnabled(true);
			else if(!chOpcja3.isSelected())
				mNarz1.setEnabled(false);
		}
		if(z == mNarz2)
		{
			String sMetry = JOptionPane.showInputDialog("Podaj długość w metrach");
			double dMetry = Double.parseDouble(sMetry);
			double dStopy = dMetry / 0.3048;
			String sStopy = String.format("%.2f", dStopy);
			JOptionPane.showMessageDialog(null, dMetry + " metrów = " + sStopy + " stóp");
		}
		if(z == mOProgramie)
		{
			JOptionPane.showMessageDialog(this, "Program made by Czaki \nversion 1.0", "O Programie", JOptionPane.INFORMATION_MESSAGE);
		}
		else if(z == bSzukaj)
		{
			
			String tekst = taNotatnik.getText();
			String szukane = tSzukany.getText();
			String wystepowanie = "";
			int i = 0;
			int index;
			int startIndex = 0;	
			while((index = tekst.indexOf(szukane, startIndex)) != -1)
			{
				startIndex = index + szukane.length();
				i++;
				wystepowanie = wystepowanie + " " + index;
			}
			JOptionPane.showMessageDialog(null, szukane + " wystąpiło " + i + " razy. Na pozycji:  " + wystepowanie);
		}else if(z == mpKopiuj)
		{
			 wybranyTekst = taNotatnik.getSelectedText();
		}else if(z == mpWklej)
		{
			taNotatnik.insert(wybranyTekst, taNotatnik.getCaretPosition());
		}else if(z == mpDolacz)
		{
			taNotatnik.append("\n" + wybranyTekst);
		}else if(z == colorCombo)
		{
			String color = colorCombo.getSelectedItem().toString();
			if(color.equals("zielony"))
				taNotatnik.setForeground(Color.GREEN);
			else if(color.equals("niebieski"))
				taNotatnik.setForeground(Color.BLUE);
			else if(color.equals("czerwony"))
				taNotatnik.setForeground(Color.RED);
			else if(color.equals("czarny"))
				taNotatnik.setForeground(Color.BLACK);
		}else if(z == bWybierzKolor)
		{
			Color wybranyKolor = JColorChooser.showDialog(null, "Wybór koloru", Color.GREEN);
			taNotatnik.setBackground(wybranyKolor);
		}
		
		else if(z == mMetal)
		{
			try {
				UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
			} catch (ClassNotFoundException | InstantiationException | IllegalAccessException
					| UnsupportedLookAndFeelException e1) {
				e1.printStackTrace();
			}
			SwingUtilities.updateComponentTreeUI(this);
		}
		else if(z == mNimbus)
		{
			try {
				UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
			} catch (ClassNotFoundException | InstantiationException | IllegalAccessException
					| UnsupportedLookAndFeelException e1) {
				e1.printStackTrace();
			}
			SwingUtilities.updateComponentTreeUI(this);
		}
		else if(z == mWindows)
		{
			try {
				UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
			} catch (ClassNotFoundException | InstantiationException | IllegalAccessException
					| UnsupportedLookAndFeelException e1) {
				e1.printStackTrace();
			}
			SwingUtilities.updateComponentTreeUI(this);
		}
		else if(z == mInny)
		{
			try {
				UIManager.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");
			} catch (ClassNotFoundException | InstantiationException | IllegalAccessException
					| UnsupportedLookAndFeelException e1) {
				
				e1.printStackTrace();
			}
			SwingUtilities.updateComponentTreeUI(this);
		}
		else if(z == mNarz1 ) 
		{
			
		}
	}
	
	public static void main (String[] args)
	{
		JMenuTest appMenu = new JMenuTest();
		appMenu.setVisible(true);
	}
	
	
}
